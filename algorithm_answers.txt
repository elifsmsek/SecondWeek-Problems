A) Temel Türler & Null Güvenliği

1) `val` ile `var` arasındaki fark nedir?

`var` degiskenler, her seferinde degistirebildigimiz degiskenlerdir ancak `val` degeri yalnizca okunabilen set edilemeyen degiskenlerdir.


2) Bir `var` değişkeni `val` gibi davranmasını nasıl sağlayabiliriz `val` kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.

`var` ile`val` arasindaki performans farki yok denecek kadar az olmasina ragmen(multithread kullandigimizda val daha performansli kaliyor) `val` daha maaliyetlidir. Bundan dolayi direkt val kullanmak yerine eger var`in set`ini private yaparsam benim icin daha uygundur ayrica bu sayede class`in icine bu degerin deger atamasini sonradan yapmak isteyebilirim bu yuzden `var` olmasi zorunludur ancak bu class`in disinda degerin baska yerde degismesini istemeyebilirim. 
	ex:
		 class UserFile{
		var fileName:String ="Elifs"
		private set

		fun user_account(){
		fileName = "elifsimsek12"
		}
	       }


3) "Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. `val` değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?

Immutable, degeri asla degismeyen degiskendir. ReadOnly ise degeri yalnizca okunabilen set edilemeyen degiskendir. "val"in da readOnly olmasinin sebebi icerisinde degistirebilir degiskenleri(var yapisindaki) icerebilir olmasidir.

4) "Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?

Bir esitlik olusturdugumuzda esitligin karsi tarafina atadigimiz degerin tipini vermesek bile IDE`nin degisken tipini belirlemesidir.Genellikle kodumuzun netligini saglayarak diger developerlar icin de daha anlasilabilirligini saglamak icin kullaniriz.Ornegin biz bir  " var sira " tanimladigimizda sira sayisinin int ile tanimlanmasini biz bilmemize ragmen IDE bunu bilemez ve ayrica diger developerlar icin de bir anlam karisikligina sebep olabilir.

5) Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?

Kotlin`de primitive olarak bildigimiz class gibi gozuken degisken turleri, ozel optimasyonlarla bytecode`a cevrilirken yine primitive olarak cevriliyorlar.(Bu bir tip donusumu degil ki aslinda Kotlin `de nesne tabanli bir programlama tipi oldugu icin dusununce bu sekilde olmasi da mantikli bir hal aliyor.)

6) "Tip Güvenliği" (Type Safety) kavramını açıklayın.

Degiskenlerin ve ifadelerin turlerini derleme zamaninda kontrol eder ve turlerin birbirleriyle karslastirilmasi durumunda error verir.Ayni zamanda nullSafety de saglayarak NullPointerException gibi hatalari onler ve ayrica uygun kosullarda degiskenlerin turuni de otomatik olarak gosterebilir.

7) Bir değişkeni nullable yapmak için ne yapmalıyız?

Nullable aslinda deger alabilir ya da almayabilir anlamina gelmektedir.Nullable yapabilmek icin de "?" koymamiz yeterlidir.

8) "Null Güvenliği" (Null Safety) kavramını açıklayın.

Null Safety, null referans hatalarını önlemek veya azaltmak için kullanılir ve null guvenligi bazi ozelliklere gore saglanir.
	Bunlar Nullable(null olabilen) ve Non-nullable(null olamayan) turler, nullable bir değişkene erişilmeden önce null kontrolü yapılması ve  null güvenliğini sağlamak için ?., ?:, !!. gibi operatörler sağlar. Bu operatörlerle null değerlerin güvenli bir şekilde kullanılması ve kontrol edilmesi sağlanır.

9) Bir değişkene null değer atanır ve tip belirtilmezse Kotlin bu değişkeni nasıl yorumlar?
Eger bir degiskenin tipi belirtilmeksizin "null" deger atiyorsak bu "Nothing" alir.(degisken tipi =Nothing`dir) 
	Ex: 
		val number:Nothing?=null

10) İlkel bir değişkenin nullable olması ile null değer alamaması arasında bellek yönetimi açısından nasıl farklar vardır?

 Non-nullable ilkel değişkenler, daha az bellek kullanımı ve daha basit bellek yönetimi sağlarken, nullable ilkel değişkenler daha fazla bellek kullanımı ve karmaşıklık getirebilir. Bu nedenle, non-nullable değişkenlerin kullanımı genellikle tercih edilir, ancak bazı durumlarda nullable değişkenlerin ihtiyacı karşılaması gerekebilir.

11) Nullable bir değişkenin bir değere sahip olması ile null olması arasında bellek yönetimi açısından nasıl bir fark vardır? Null değer almış bir değişken bellekte yer kaplamaz diyebilir miyiz?

Bir degisken primitive olsa bile "nullable?" bir deger aliyorsa, bu degiskenin class hali anlamini tasiyor.
		- Degiskenin kapladigi alani, 
		-Erisim hizinin degistirir.
		-Referans kontrolunde farkli sonuc almamiza neden olur.
12) Nullable bir değişkenle çalışırken hangi operatörleri kullanırız? Bu operatörlerin kullanım farkları nelerdir? Hangisini ne zaman kullanmak daha anlamlıdır?

 Nullable bir değişkenin null olup olmadığını kontrol etmek için null operatörü kullanılır. Bu operatör, değişkenin null olup olmadığını belirler ve buna göre işlem yapmamızı sağlar. 
		val str: String? = null
		if (str != null) {
   	 		println(str.length) 
		}

Elvis operatörü, nullable bir değişkenin null olması durumunda varsayılan bir değer atamak için kullanılır. Bu operatör, değişkenin null olup olmadığını kontrol eder; null ise, belirtilen varsayılan değeri döndürür.

		val strLength = str?.length ?: 4

Safe call operatörü, nullable bir değişkene güvenli bir şekilde erişmek için kullanılır. Bu operatör, değişken null değilse, normal şekilde erişimi sağlar; ancak değişken null ise, hemen null döndürür ve sonraki işlemleri engeller.
		val strLength = str?.length


B) Sayılar	

1) Kaç farklı tipte "number" sınıfı miras alan "alt sınıf" (child class) vardır? Bunların değer aralıkları neden önemlidir?

 Kotlin'deki "number" sınıfını miras alan alt sınıflar arasında genellikle dört temel tip bulunmaktadır: Byte, Short, Int ve Long.Bunlarin deger araliklarinin onemli olmasinin sebebi programimiza ihtiyaclarina uygun olarak performans,bellek kullanimi ve dogrulugu acisindan kritiktir. 

2) Eğer bir değişkene tip belirtimi yapılmaz ve bir değer atanırsa, Kotlin tip çıkarımını nasıl yapar?

Type inference sayesinde esitligin,IDE otomatik bir sekilde esitligin sag tarafina bakarak degiskenin tipini belirlemesi ama sayisal degerler icin.

3) Float değişken oluştururken `F` ve `f` harfleri varken, Long değişken oluştururken neden küçük `l` harfi yoktur?

Cunku Long degisenlerde `l` kullanimi kodumuzu yazarken anlam karisikligina ve kodun iyi bir sekilde anlasilamamasina sebep olabilir.(1 veya `I`gibi anlasilabilir.)





