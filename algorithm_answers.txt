A) Temel Türler & Null Güvenliği

1) `val` ile `var` arasındaki fark nedir?

`var` degiskenler, her seferinde degistirebildigimiz degiskenlerdir ancak `val` degeri yalnizca okunabilen set edilemeyen degiskenlerdir.


2) Bir `var` değişkeni `val` gibi davranmasını nasıl sağlayabiliriz `val` kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.

`var` ile`val` arasindaki performans farki yok denecek kadar az olmasina ragmen(multithread kullandigimizda val daha performansli kaliyor) `val` daha maaliyetlidir. Bundan dolayi direkt val kullanmak yerine eger var`in set`ini private yaparsam benim icin daha uygundur ayrica bu sayede class`in icine bu degerin deger atamasini sonradan yapmak isteyebilirim bu yuzden `var` olmasi zorunludur ancak bu class`in disinda degerin baska yerde degismesini istemeyebilirim. 
	ex:
		 class UserFile{
		var fileName:String ="Elifs"
		private set

		fun user_account(){
		fileName = "elifsimsek12"
		}
	       }


3) "Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. `val` değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?

Immutable, degeri asla degismeyen degiskendir. ReadOnly ise degeri yalnizca okunabilen set edilemeyen degiskendir. "val"in da readOnly olmasinin sebebi icerisinde degistirebilir degiskenleri(var yapisindaki) icerebilir olmasidir.

4) "Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?

Bir esitlik olusturdugumuzda esitligin karsi tarafina atadigimiz degerin tipini vermesek bile IDE`nin degisken tipini belirlemesidir.Genellikle kodumuzun netligini saglayarak diger developerlar icin de daha anlasilabilirligini saglamak icin kullaniriz.Ornegin biz bir  " var sira " tanimladigimizda sira sayisinin int ile tanimlanmasini biz bilmemize ragmen IDE bunu bilemez ve ayrica diger developerlar icin de bir anlam karisikligina sebep olabilir.

5) Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?

Kotlin`de primitive olarak bildigimiz class gibi gozuken degisken turleri, ozel optimasyonlarla bytecode`a cevrilirken yine primitive olarak cevriliyorlar.(Bu bir tip donusumu degil ki aslinda Kotlin `de nesne tabanli bir programlama tipi oldugu icin dusununce bu sekilde olmasi da mantikli bir hal aliyor.)

6) "Tip Güvenliği" (Type Safety) kavramını açıklayın.

Degiskenlerin ve ifadelerin turlerini derleme zamaninda kontrol eder ve turlerin birbirleriyle karslastirilmasi durumunda error verir.Ayni zamanda nullSafety de saglayarak NullPointerException gibi hatalari onler ve ayrica uygun kosullarda degiskenlerin turuni de otomatik olarak gosterebilir.

7) Bir değişkeni nullable yapmak için ne yapmalıyız?

Nullable aslinda deger alabilir ya da almayabilir anlamina gelmektedir.Nullable yapabilmek icin de "?" koymamiz yeterlidir.



